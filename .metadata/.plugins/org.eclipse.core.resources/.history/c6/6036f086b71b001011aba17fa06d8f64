package com.prajyot.hms.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.prajyot.hms.entity.Appointment;
import com.prajyot.hms.entity.Patient;
import com.prajyot.hms.serviceInterface.AppointmentServiceInterface;
import com.prajyot.hms.serviceInterface.PatientServiceInterface;

@RestController
@RequestMapping("/doctor")
public class DoctorController {

	@Autowired
	PatientServiceInterface patientServiceInterface;
	 
	@Autowired
	AppointmentServiceInterface appointmentServiceInterface;
	
	@PostMapping("/addPatient")
	public ResponseEntity<?> addPatient(@RequestBody Patient patient){
		try {
			Patient result = appointmentServiceInterface.bookAppointment(appointment);
			if(result.getAppointmentId() != null) {
				 return ResponseEntity.status(HttpStatus.OK).body("Appointment Booked");
			}else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Appointment not Booked");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}
	
	@GetMapping("/allPatients")
	public ResponseEntity<?> getAllPatients(@RequestParam(defaultValue = "0")  int page ,@RequestParam(defaultValue = "10") int size){
		try {
			Page<Patient> patients = patientServiceInterface.getAllPatients(page,size);
			if(!patients.isEmpty()) {
				return ResponseEntity.ok(patients);
			}
			else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No records");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}
	
	@GetMapping("/patient")
	public ResponseEntity<?> getPatientByName(@RequestParam String name,@RequestParam(defaultValue = "0") int page ,@RequestParam(defaultValue = "10") int size){
		try {
			Page<Patient> patients = patientServiceInterface.getPatientByName(name,page,size);
			if(!patients.isEmpty()) {
				return ResponseEntity.ok(patients);
			}
			else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No records");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}
	
	@PostMapping("/bookAppointment")
	public ResponseEntity<?> bookAppointment(@RequestBody Appointment appointment){
		try {
			boolean result = appointmentServiceInterface.bookAppointment(appointment);
			if(result) {
				 return ResponseEntity.status(HttpStatus.OK).body("Appointment Booked");
			}else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Appointment not Booked");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}
	
	@GetMapping("/allAppointment")
	public ResponseEntity<?> allAppointment(@RequestParam(defaultValue = "0")  int page ,@RequestParam(defaultValue = "10") int size){
		try {
			Page<Appointment> appointments = appointmentServiceInterface.allAppointment(page,size);
			if(!appointments.isEmpty()) {
				return ResponseEntity.ok(appointments);
			}
			else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No appointments");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}
	
	@GetMapping("/pendingAppointment")
	public ResponseEntity<?> pendingAppointment(@RequestParam(defaultValue = "0")  int page ,@RequestParam(defaultValue = "10") int size){
		try {
			Page<Appointment> appointments = appointmentServiceInterface.pendingAppointment(page,size);
			if(!appointments.isEmpty()) {
				return ResponseEntity.ok(appointments);
			}
			else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No pending appointments");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}
	
	@GetMapping("/completedAppointment")
	public ResponseEntity<?> completedAppointment(@RequestParam(defaultValue = "0")  int page ,@RequestParam(defaultValue = "10") int size){
		try {
			Page<Appointment> appointments = appointmentServiceInterface.completedAppointment(page,size);
			if(!appointments.isEmpty()) {
				return ResponseEntity.ok(appointments);
			}
			else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No completed appointments");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}
	
	@PostMapping("/cancleAppointment")
	public ResponseEntity<?> cancleAppointment(@RequestParam int patientId) {
		try {
			boolean result = appointmentServiceInterface.cancleAppointment(patientId);
			if(result) {
				 return ResponseEntity.status(HttpStatus.OK).body("Appointment cancelled");
			}else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Appointment not cancelled!!");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}
	
	@PostMapping("/updateAppointment")
	public ResponseEntity<?> updateAppointment(@RequestParam int patientId){
		try {
			boolean result = appointmentServiceInterface.updateAppointment(patientId);
			if(result) {
				 return ResponseEntity.status(HttpStatus.OK).body("Appointment updated");
			}else {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Appointment not updated!!");
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Exception");
		}
	}


	
}
